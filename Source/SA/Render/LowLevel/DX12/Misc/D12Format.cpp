// Copyright (c) 2023 Sapphire's Suite. All Rights Reserved.

#include "D12Format.hpp"

#include <SA/Render/LowLevel/Common/Misc/Format.hpp>

namespace SA::RND::DX12
{
	static const DXGI_FORMAT d12FormatIndexMap[] = {
		DXGI_FORMAT_UNKNOWN,

		DXGI_FORMAT_R8_UNORM,
		DXGI_FORMAT_R8_SNORM,
		DXGI_FORMAT_R8_UINT,
		DXGI_FORMAT_R8_SINT,

		DXGI_FORMAT_R8G8_UNORM,
		DXGI_FORMAT_R8G8_SNORM,
		DXGI_FORMAT_R8G8_UINT,
		DXGI_FORMAT_R8G8_SINT,

		DXGI_FORMAT_R8G8B8A8_UNORM,
		DXGI_FORMAT_R8G8B8A8_SNORM,
		DXGI_FORMAT_R8G8B8A8_UINT,
		DXGI_FORMAT_R8G8B8A8_SINT,
		DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,

		DXGI_FORMAT_B8G8R8A8_UNORM,
		DXGI_FORMAT_B8G8R8A8_TYPELESS,
		DXGI_FORMAT_B8G8R8A8_TYPELESS,
		DXGI_FORMAT_B8G8R8A8_TYPELESS,
		DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,

		DXGI_FORMAT_R16_UNORM,
		DXGI_FORMAT_R16_SNORM,
		DXGI_FORMAT_R16_UINT,
		DXGI_FORMAT_R16_SINT,
		DXGI_FORMAT_R16_FLOAT,

		DXGI_FORMAT_R16G16_UNORM,
		DXGI_FORMAT_R16G16_SNORM,
		DXGI_FORMAT_R16G16_UINT,
		DXGI_FORMAT_R16G16_SINT,
		DXGI_FORMAT_R16G16_FLOAT,

		DXGI_FORMAT_R16G16B16A16_UNORM,
		DXGI_FORMAT_R16G16B16A16_SNORM,
		DXGI_FORMAT_R16G16B16A16_UINT,
		DXGI_FORMAT_R16G16B16A16_SINT,
		DXGI_FORMAT_R16G16B16A16_FLOAT,

		DXGI_FORMAT_R32_UINT,
		DXGI_FORMAT_R32_SINT,
		DXGI_FORMAT_R32_FLOAT,

		DXGI_FORMAT_R32G32_UINT,
		DXGI_FORMAT_R32G32_SINT,
		DXGI_FORMAT_R32G32_FLOAT,

		DXGI_FORMAT_R32G32B32_UINT,
		DXGI_FORMAT_R32G32B32_SINT,
		DXGI_FORMAT_R32G32B32_FLOAT,

		DXGI_FORMAT_R32G32B32A32_UINT,
		DXGI_FORMAT_R32G32B32A32_SINT,
		DXGI_FORMAT_R32G32B32A32_FLOAT,

		DXGI_FORMAT_D16_UNORM,
		DXGI_FORMAT_D32_FLOAT,
		DXGI_FORMAT_D24_UNORM_S8_UINT,
	};

	DXGI_FORMAT API_GetFormat(Format _format)
	{
		const uint32_t index = static_cast<uint32_t>(_format);

		SA_ASSERT((OutOfRange, index, 0u, sizeof(d12FormatIndexMap)), SA.Render.RHI.DX12,
			(L"Format value [%1] invalid", index));

		return d12FormatIndexMap[index];
	}
		
	Format API_GetFormat(DXGI_FORMAT _d12Format)
	{
		for (uint32_t i = 0; i < sizeof(d12FormatIndexMap); ++i)
		{
			if (d12FormatIndexMap[i] == _d12Format)
				return static_cast<Format>(i);
		}

		SA_LOG((L"DXGI_FORMAT [%1] not supported yet!", static_cast<uint32_t>(_d12Format)), Error, Sa.Render.RHI.DX12);

		return Format::R8G8B8A8_UNORM;
	}

	namespace Intl
	{
		DXGI_FORMAT UNORMToSRGBFormat(DXGI_FORMAT _format)
		{
			if (_format == DXGI_FORMAT_R8G8B8A8_UNORM)
				return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;

			if (_format == DXGI_FORMAT_B8G8R8A8_TYPELESS)
				return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;

			if (_format == DXGI_FORMAT_B8G8R8X8_TYPELESS)
				return DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;

			return _format;
		}

		DXGI_FORMAT SRGBToUNORMFormat(DXGI_FORMAT _format)
		{
			if (_format == DXGI_FORMAT_R8G8B8A8_UNORM_SRGB)
				return DXGI_FORMAT_R8G8B8A8_UNORM;

			if (_format == DXGI_FORMAT_B8G8R8A8_UNORM_SRGB)
				return DXGI_FORMAT_B8G8R8A8_TYPELESS;

			if (_format == DXGI_FORMAT_B8G8R8X8_UNORM_SRGB)
				return DXGI_FORMAT_B8G8R8X8_TYPELESS;

			return _format;
		}
	}
}
